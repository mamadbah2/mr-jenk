<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ANGULAR20_KARMA_FIX.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ANGULAR20_KARMA_FIX.md" />
              <option name="updatedContent" value="# Solution : Erreur Karma avec Angular 20&#10;&#10;## ❌ Problème rencontré&#10;&#10;```&#10;Error: Cannot find module '@angular-devkit/build-angular/plugins/karma'&#10;```&#10;&#10;##  Cause&#10;&#10;Angular 20 a remplacé `@angular-devkit/build-angular` par `@angular/build` et le plugin Karma n'est plus exporté de la même manière. L'ancienne configuration Karma qui référençait `@angular-devkit/build-angular/plugins/karma` ne fonctionne plus.&#10;&#10;## ✅ Solution appliquée&#10;&#10;### Modification du fichier `karma.conf.js`&#10;&#10;**Avant (ne fonctionne pas avec Angular 20) :**&#10;```javascript&#10;frameworks: ['jasmine', '@angular-devkit/build-angular'],&#10;plugins: [&#10;  require('karma-jasmine'),&#10;  require('karma-chrome-launcher'),&#10;  require('karma-jasmine-html-reporter'),&#10;  require('karma-coverage'),&#10;  require('@angular-devkit/build-angular/plugins/karma') // ❌ N'existe plus&#10;]&#10;```&#10;&#10;**Après (compatible Angular 20) :**&#10;```javascript&#10;frameworks: ['jasmine'],  // ✅ Jasmine uniquement&#10;plugins: [&#10;  require('karma-jasmine'),&#10;  require('karma-chrome-launcher'),&#10;  require('karma-jasmine-html-reporter'),&#10;  require('karma-coverage')&#10;  // ✅ Pas besoin du plugin @angular-devkit&#10;]&#10;```&#10;&#10;### Configuration complète fonctionnelle&#10;&#10;```javascript&#10;// karma.conf.js - Angular 20 compatible&#10;module.exports = function(config) {&#10;  config.set({&#10;    basePath: '',&#10;    frameworks: ['jasmine'],&#10;    plugins: [&#10;      require('karma-jasmine'),&#10;      require('karma-chrome-launcher'),&#10;      require('karma-jasmine-html-reporter'),&#10;      require('karma-coverage')&#10;    ],&#10;    client: {&#10;      jasmine: {&#10;        random: false&#10;      },&#10;      clearContext: false&#10;    },&#10;    jasmineHtmlReporter: {&#10;      suppressAll: true&#10;    },&#10;    coverageReporter: {&#10;      dir: require('path').join(__dirname, './coverage/buy-01-frontend'),&#10;      subdir: '.',&#10;      reporters: [&#10;        { type: 'html' },&#10;        { type: 'text-summary' },&#10;        { type: 'lcovonly' }&#10;      ]&#10;    },&#10;    reporters: ['progress', 'kjhtml'],&#10;    browsers: ['ChromeHeadless'],&#10;    customLaunchers: {&#10;      ChromeHeadlessCI: {&#10;        base: 'ChromeHeadless',&#10;        flags: [&#10;          '--no-sandbox',&#10;          '--disable-gpu',&#10;          '--disable-dev-shm-usage',&#10;          '--disable-software-rasterizer'&#10;        ]&#10;      }&#10;    },&#10;    restartOnFileChange: false,&#10;    singleRun: true,&#10;    logLevel: config.LOG_INFO&#10;  });&#10;};&#10;```&#10;&#10;## ✅ Résultat&#10;&#10;Les tests s'exécutent maintenant correctement en mode headless :&#10;&#10;```&#10;Chrome Headless 140.0.0.0 (Linux x86_64): Executed 25 of 25 SUCCESS&#10;TOTAL: 25 SUCCESS&#10;&#10;Coverage summary:&#10;Statements   : 27.58% (163/591)&#10;Branches     : 15.97% (27/169)&#10;Functions    : 25.00% (40/160)&#10;Lines        : 27.36% (156/570)&#10;```&#10;&#10;##  Commande de test&#10;&#10;```bash&#10;npm run test:headless&#10;```&#10;&#10;##  Références&#10;&#10;- Angular 20 a migré vers `@angular/build` (nouveau builder)&#10;- La configuration Karma est maintenant plus simple et n'a plus besoin des plugins Angular spécifiques&#10;- Le framework Jasmine natif suffit pour exécuter les tests&#10;&#10;##  Notes importantes&#10;&#10;1. **Pas de régression** : Les tests fonctionnent exactement de la même manière qu'avant&#10;2. **Mode headless** : Chrome s'exécute sans interface graphique (idéal pour CI/CD)&#10;3. **Couverture de code** : Toujours générée automatiquement&#10;4. **Compatible Jenkins** : La configuration est prête pour l'intégration continue&#10;&#10;---&#10;&#10;**Date de résolution** : 27 octobre 2025&#10;**Version Angular** : 20.1.2&#10;**Version @angular/build** : 20.1.3&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FRONTEND_TESTS_README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FRONTEND_TESTS_README.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Configuration des Tests Frontend Angular (Headless)&#10;&#10;##  Résumé des modifications&#10;&#10;Ce document décrit les modifications apportées pour ajouter des tests unitaires Angular en mode headless (sans fenêtre) dans le pipeline Jenkins.&#10;&#10;##  Fichiers modifiés/créés&#10;&#10;### 1. **karma.conf.js** (nouveau fichier)&#10;- **Localisation**: `buy-01-frontend/karma.conf.js`&#10;- **Description**: Fichier de configuration Karma pour les tests headless (Angular 20 compatible)&#10;- **Fonctionnalités**:&#10;  - Tests en mode `ChromeHeadless` (pas d'interface graphique)&#10;  - Configuration CI avec flags `--no-sandbox`, `--disable-gpu`, et `--disable-software-rasterizer`&#10;  - Génération automatique de rapports de couverture de code&#10;  - Exécution unique (`singleRun: true`)&#10;  - Compatible avec Angular 20 (utilise le framework Jasmine de base)&#10;&#10;### 2. **package.json** (modifié)&#10;- **Localisation**: `buy-01-frontend/package.json`&#10;- **Modification**: Ajout du script `test:headless`&#10;- **Commande**: &#10;  ```bash&#10;  npm run test:headless&#10;  ```&#10;- **Options**:&#10;  - `--karma-config=karma.conf.js`: Utilise la configuration Karma personnalisée&#10;  - `--browsers=ChromeHeadlessCI`: Lance Chrome en mode headless avec flags CI&#10;  - `--watch=false`: Pas de mode watch, exécution unique&#10;  - `--code-coverage`: Génère les rapports de couverture&#10;&#10;### 3. **Jenkinsfile** (modifié)&#10;- **Stage**: `Build in Unit Test`&#10;- **Modification**: Ajout d'un bloc script pour tester le frontend&#10;- **Ordre d'exécution**:&#10;  1. Tests Frontend Angular (headless) ← **NOUVEAU**&#10;  2. Tests Backend avec SonarQube (Discovery, Config, API Gateway, Product, User, Media)&#10;&#10;##  Fonctionnement dans le pipeline&#10;&#10;Le stage `Build in Unit Test` exécute maintenant :&#10;&#10;```groovy&#10;script {&#10;    echo ' Tests Frontend Angular (Headless)...'&#10;    dir('buy-01-frontend') {&#10;        sh '''&#10;            npm install&#10;            npm run test:headless&#10;        '''&#10;    }&#10;}&#10;```&#10;&#10;## ✅ Avantages&#10;&#10;1. **Pas d'interface graphique**: Les tests s'exécutent en mode headless, idéal pour CI/CD&#10;2. **Rapports de couverture**: Génération automatique de rapports de couverture de code&#10;3. **Compatible CI**: Configuration optimisée pour les environnements d'intégration continue&#10;4. **Feedback rapide**: Les tests frontend sont exécutés avant les tests backend&#10;&#10;##  Exécution locale&#10;&#10;Pour tester localement sans Jenkins :&#10;&#10;```bash&#10;cd buy-01-frontend&#10;npm install&#10;npm run test:headless&#10;```&#10;&#10;##  Rapports générés&#10;&#10;Les rapports de couverture sont générés dans :&#10;- `buy-01-frontend/coverage/buy-01-frontend/`&#10;  - Format HTML (pour visualisation)&#10;  - Format LCOV (pour outils d'analyse)&#10;  - Résumé texte dans la console&#10;&#10;##  Dépannage&#10;&#10;### Chrome ne se lance pas&#10;Si vous rencontrez des problèmes avec Chrome :&#10;1. Assurez-vous que Chrome/Chromium est installé sur le serveur Jenkins&#10;2. Les flags `--no-sandbox` et `--disable-dev-shm-usage` sont déjà configurés pour les environnements Docker/CI&#10;&#10;### Tests qui échouent&#10;- Vérifiez les logs dans la console Jenkins&#10;- Les rapports de tests sont dans la sortie de Karma&#10;- La couverture de code peut révéler des zones non testées&#10;&#10;### Erreur &quot;Cannot find module '@angular-devkit/build-angular/plugins/karma'&quot;&#10;Ce problème survient avec Angular 20 qui a remplacé `@angular-devkit/build-angular` par `@angular/build`.&#10;**Solution appliquée**: Le `karma.conf.js` utilise maintenant une configuration simplifiée compatible avec Angular 20, en utilisant directement le framework Jasmine sans dépendances aux plugins @angular-devkit.&#10;&#10;##  Notes&#10;&#10;- Les tests sont exécutés à chaque build Jenkins&#10;- L'échec des tests frontend arrêtera le pipeline&#10;- Les résultats sont visibles dans les logs Jenkins&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Jenkinsfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Jenkinsfile" />
              <option name="originalContent" value="pipeline {&#10;    agent any&#10;&#10;    environment {&#10;        DOCKER_USER = credentials('docker-hub-credentials') // Nom d'utilisateur et token du Docker Hub&#10;        IMAGE_VERSION = &quot;${env.BUILD_NUMBER}&quot;&#10;        SERVICES = &quot;frontend product-service user-service media-service api-gateway config-service eureka-server&quot;&#10;        GITHUB_TOKEN = credentials('GITHUB_TOKEN')&#10;    }&#10;&#10;    stages {&#10;        &#10;        stage('Clean Docker') {&#10;            steps {&#10;                echo ' Nettoyage Docker...'&#10;                sh 'docker system prune -af || true'&#10;            }&#10;        }&#10;        &#10;        stage('Build in Unit Test') {&#10;            steps {&#10;                echo ' Lancement des services nécessaires pour les tests...'&#10;&#10;                // Test Frontend Angular&#10;                echo ' Tests Frontend Angular (Headless)...'&#10;                dir('buy-01-frontend') {&#10;                    sh '''&#10;                        npm install&#10;                        npm run test:headless&#10;                    '''&#10;                }&#10;&#10;                withSonarQubeEnv('safe-zone-mr-jenk') {&#10;                     withCredentials([string(credentialsId: 'SONAR_USER_TOKEN', variable: 'SONAR_USER_TOKEN')]) {&#10;                         sh '''&#10;                             ls -l&#10;&#10;                             #  Discovery Service&#10;                             cd discovery-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-discovery \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Config Service&#10;                             cd config-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-config \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  API Gateway&#10;                             cd api-gateway&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-api-gateway \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Product Service&#10;                             cd product-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-product \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  User Service&#10;                             cd user-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-user \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Media Service&#10;                             cd media-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-media \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;                         '''&#10;                     }&#10;                 }&#10;&#10;            }&#10;            post {&#10;                always {&#10;                    sh 'pwd'&#10;                    junit '**/**/target/surefire-reports/*.xml'&#10;                }&#10;            }&#10;        }&#10;        stage('Integration Test') {&#10;            steps {&#10;                script {&#10;                    try {&#10;                        sh 'docker-compose up --build -d'&#10;                    } finally {&#10;                        echo &quot;Tearing down the test environment.&quot;&#10;                        sh 'docker-compose down -v --remove-orphans'&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build') {&#10;            steps {&#10;                echo 'Building...'&#10;                sh 'docker-compose up -d --build'&#10;            }&#10;        }&#10;&#10;        stage('Deploy') {&#10;            steps {&#10;                script {&#10;                    echo 'Deploying...'&#10;                        echo 'Successful Registration'&#10;                        def dockerhubUser = 'mamadbah2'&#10;                        def services = ['frontend', 'product-service', 'user-service', 'media-service', 'api-gateway', 'config-service', 'eureka-server']&#10;                        echo 'Starting Services'&#10;                        services.each { service -&gt;&#10;                            echo &quot;buy-01-${service}...&quot;&#10;&#10;                            withCredentials([usernamePassword(&#10;                                credentialsId: 'dockerhub-credential',&#10;                                usernameVariable: 'DOCKER_USER',&#10;                                passwordVariable: 'DOCKER_PASS'&#10;                            )]) {&#10;                                sh 'echo &quot;Username is: $DOCKER_USER&quot;'&#10;                                sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'&#10;                            }&#10;&#10;&#10;                            // Nom de l'image locale&#10;                            def localImageName = &quot;my_buy01_pipeline2-${service}&quot;&#10;&#10;                            // Nom de l'image pour le registre Docker Hub&#10;                            def taggedImageName = &quot;${dockerhubUser}/${service}:${env.BUILD_NUMBER}&quot;&#10;&#10;                            // Taguer l'image locale avec le nom du registre&#10;                            sh &quot;docker tag ${localImageName}:latest ${taggedImageName}&quot;&#10;&#10;                            // Pousser l'image vers Docker Hub&#10;                            sh &quot;docker push ${taggedImageName}&quot;&#10;                        }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Deploy Locally') {&#10;            steps {&#10;                script {&#10;                    echo &quot;Déploiement sur la machine locale, version ${env.BUILD_NUMBER}...&quot;&#10;&#10;                    // Exécute les commandes Docker-Compose en passant la variable d'environnement&#10;                    withEnv([&quot;IMAGE_VERSION=${env.BUILD_NUMBER}&quot;]) {&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml down&quot;&#10;                        // Télécharger les nouvelles images&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml pull&quot;&#10;                        // Redémarrer les conteneurs&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml up -d&quot;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    post {&#10;         success {&#10;                sh &quot;echo ${env.BUILD_NUMBER} &gt; last_successful_build.txt&quot;&#10;                mail to: 'bahmamadoubobosewa@gmail.com',&#10;                     subject: &quot;SUCCESS: Pipeline ${env.JOB_NAME} [${env.BUILD_NUMBER}]&quot;,&#10;                     body: &quot;La pipeline a réussi. Voir les détails sur ${env.BUILD_URL}&quot;&#10;            }&#10;            failure {&#10;                script {&#10;                    echo &quot;⚠️ Déploiement échoué, rollback en cours...&quot;&#10;&#10;                    // Lire la dernière version déployée avec succès&#10;                    def lastSuccessfulBuild = sh(script: &quot;cat last_successful_build.txt&quot;, returnStdout: true).trim()&#10;&#10;                    if (lastSuccessfulBuild) {&#10;                        echo &quot;Rollback vers la version ${lastSuccessfulBuild}...&quot;&#10;                        withEnv([&quot;IMAGE_VERSION=${lastSuccessfulBuild}&quot;]) {&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml down&quot;&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml pull&quot;&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml up -d&quot;&#10;                        }&#10;                    } else {&#10;                        echo &quot;Aucune version précédente disponible pour rollback.&quot;&#10;                    }&#10;                }&#10;                mail to: 'bahmamadoubobosewa@gmail.com',&#10;                     subject: &quot;FAILURE: Pipeline ${env.JOB_NAME} [${env.BUILD_NUMBER}]&quot;,&#10;                     body: &quot;La pipeline a échoué à l'étape '${currentBuild.currentResult}'. Voir les logs sur ${env.BUILD_URL}&quot;&#10;            }&#10;    }&#10;}" />
              <option name="updatedContent" value="pipeline {&#10;    agent any&#10;&#10;    environment {&#10;        DOCKER_USER = credentials('docker-hub-credentials') // Nom d'utilisateur et token du Docker Hub&#10;        IMAGE_VERSION = &quot;${env.BUILD_NUMBER}&quot;&#10;        SERVICES = &quot;frontend product-service user-service media-service api-gateway config-service eureka-server&quot;&#10;        GITHUB_TOKEN = credentials('GITHUB_TOKEN')&#10;    }&#10;&#10;    stages {&#10;        &#10;        stage('Clean Docker') {&#10;            steps {&#10;                echo ' Nettoyage Docker...'&#10;                sh 'docker system prune -af || true'&#10;            }&#10;        }&#10;        &#10;        stage('Build in Unit Test') {&#10;            steps {&#10;                echo ' Lancement des services nécessaires pour les tests...'&#10;&#10;                script {&#10;                    echo ' Tests Frontend Angular (Headless)...'&#10;                    dir('buy-01-frontend') {&#10;                        sh '''&#10;                            npm install&#10;                            npm run test:headless&#10;                        '''&#10;                    }&#10;                }&#10;&#10;                withSonarQubeEnv('safe-zone-mr-jenk') {&#10;                     withCredentials([string(credentialsId: 'SONAR_USER_TOKEN', variable: 'SONAR_USER_TOKEN')]) {&#10;                         sh '''&#10;                             ls -l&#10;&#10;                             #  Discovery Service&#10;                             cd discovery-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-discovery \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Config Service&#10;                             cd config-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-config \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  API Gateway&#10;                             cd api-gateway&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-api-gateway \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Product Service&#10;                             cd product-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-product \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  User Service&#10;                             cd user-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-user \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;&#10;                             #  Media Service&#10;                             cd media-service&#10;                             mvn clean package -DskipTests=false sonar:sonar \&#10;                                 -Dsonar.projectKey=safe-zone-media \&#10;                                 -Dsonar.host.url=$SONAR_HOST_URL \&#10;                                 -Dsonar.login=$SONAR_USER_TOKEN&#10;                             cd ..&#10;                         '''&#10;                     }&#10;                 }&#10;&#10;            }&#10;            post {&#10;                always {&#10;                    sh 'pwd'&#10;                    junit '**/**/target/surefire-reports/*.xml'&#10;                }&#10;            }&#10;        }&#10;        stage('Integration Test') {&#10;            steps {&#10;                script {&#10;                    try {&#10;                        sh 'docker-compose up --build -d'&#10;                    } finally {&#10;                        echo &quot;Tearing down the test environment.&quot;&#10;                        sh 'docker-compose down -v --remove-orphans'&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build') {&#10;            steps {&#10;                echo 'Building...'&#10;                sh 'docker-compose up -d --build'&#10;            }&#10;        }&#10;&#10;        stage('Deploy') {&#10;            steps {&#10;                script {&#10;                    echo 'Deploying...'&#10;                        echo 'Successful Registration'&#10;                        def dockerhubUser = 'mamadbah2'&#10;                        def services = ['frontend', 'product-service', 'user-service', 'media-service', 'api-gateway', 'config-service', 'eureka-server']&#10;                        echo 'Starting Services'&#10;                        services.each { service -&gt;&#10;                            echo &quot;buy-01-${service}...&quot;&#10;&#10;                            withCredentials([usernamePassword(&#10;                                credentialsId: 'dockerhub-credential',&#10;                                usernameVariable: 'DOCKER_USER',&#10;                                passwordVariable: 'DOCKER_PASS'&#10;                            )]) {&#10;                                sh 'echo &quot;Username is: $DOCKER_USER&quot;'&#10;                                sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'&#10;                            }&#10;&#10;&#10;                            // Nom de l'image locale&#10;                            def localImageName = &quot;my_buy01_pipeline2-${service}&quot;&#10;&#10;                            // Nom de l'image pour le registre Docker Hub&#10;                            def taggedImageName = &quot;${dockerhubUser}/${service}:${env.BUILD_NUMBER}&quot;&#10;&#10;                            // Taguer l'image locale avec le nom du registre&#10;                            sh &quot;docker tag ${localImageName}:latest ${taggedImageName}&quot;&#10;&#10;                            // Pousser l'image vers Docker Hub&#10;                            sh &quot;docker push ${taggedImageName}&quot;&#10;                        }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Deploy Locally') {&#10;            steps {&#10;                script {&#10;                    echo &quot;Déploiement sur la machine locale, version ${env.BUILD_NUMBER}...&quot;&#10;&#10;                    // Exécute les commandes Docker-Compose en passant la variable d'environnement&#10;                    withEnv([&quot;IMAGE_VERSION=${env.BUILD_NUMBER}&quot;]) {&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml down&quot;&#10;                        // Télécharger les nouvelles images&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml pull&quot;&#10;                        // Redémarrer les conteneurs&#10;                        sh &quot;docker-compose -f docker-compose-deploy.yml up -d&quot;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    post {&#10;         success {&#10;                sh &quot;echo ${env.BUILD_NUMBER} &gt; last_successful_build.txt&quot;&#10;                mail to: 'bahmamadoubobosewa@gmail.com',&#10;                     subject: &quot;SUCCESS: Pipeline ${env.JOB_NAME} [${env.BUILD_NUMBER}]&quot;,&#10;                     body: &quot;La pipeline a réussi. Voir les détails sur ${env.BUILD_URL}&quot;&#10;            }&#10;            failure {&#10;                script {&#10;                    echo &quot;⚠️ Déploiement échoué, rollback en cours...&quot;&#10;&#10;                    // Lire la dernière version déployée avec succès&#10;                    def lastSuccessfulBuild = sh(script: &quot;cat last_successful_build.txt&quot;, returnStdout: true).trim()&#10;&#10;                    if (lastSuccessfulBuild) {&#10;                        echo &quot;Rollback vers la version ${lastSuccessfulBuild}...&quot;&#10;                        withEnv([&quot;IMAGE_VERSION=${lastSuccessfulBuild}&quot;]) {&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml down&quot;&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml pull&quot;&#10;                            sh &quot;docker-compose -f docker-compose-deploy.yml up -d&quot;&#10;                        }&#10;                    } else {&#10;                        echo &quot;Aucune version précédente disponible pour rollback.&quot;&#10;                    }&#10;                }&#10;                mail to: 'bahmamadoubobosewa@gmail.com',&#10;                     subject: &quot;FAILURE: Pipeline ${env.JOB_NAME} [${env.BUILD_NUMBER}]&quot;,&#10;                     body: &quot;La pipeline a échoué à l'étape '${currentBuild.currentResult}'. Voir les logs sur ${env.BUILD_URL}&quot;&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buy-01-frontend/karma.conf.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buy-01-frontend/karma.conf.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="// Karma configuration file for headless testing (Angular 20 compatible)&#10;module.exports = function(config) {&#10;  config.set({&#10;    basePath: '',&#10;    frameworks: ['jasmine'],&#10;    plugins: [&#10;      require('karma-jasmine'),&#10;      require('karma-chrome-launcher'),&#10;      require('karma-jasmine-html-reporter'),&#10;      require('karma-coverage')&#10;    ],&#10;    client: {&#10;      jasmine: {&#10;        random: false&#10;      },&#10;      clearContext: false&#10;    },&#10;    jasmineHtmlReporter: {&#10;      suppressAll: true&#10;    },&#10;    coverageReporter: {&#10;      dir: require('path').join(__dirname, './coverage/buy-01-frontend'),&#10;      subdir: '.',&#10;      reporters: [&#10;        { type: 'html' },&#10;        { type: 'text-summary' },&#10;        { type: 'lcovonly' }&#10;      ]&#10;    },&#10;    reporters: ['progress', 'kjhtml'],&#10;    browsers: ['ChromeHeadless'],&#10;    customLaunchers: {&#10;      ChromeHeadlessCI: {&#10;        base: 'ChromeHeadless',&#10;        flags: [&#10;          '--no-sandbox',&#10;          '--disable-gpu',&#10;          '--disable-dev-shm-usage',&#10;          '--disable-software-rasterizer'&#10;        ]&#10;      }&#10;    },&#10;    restartOnFileChange: false,&#10;    singleRun: true,&#10;    logLevel: config.LOG_INFO&#10;  });&#10;};&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buy-01-frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buy-01-frontend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;buy-01-frontend&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;,&#10;    &quot;test&quot;: &quot;ng test&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/common&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/core&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/router&quot;: &quot;^20.1.2&quot;,&#10;    &quot;lucide-angular&quot;: &quot;^0.525.0&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.15.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular/build&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@types/jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;jasmine-core&quot;: &quot;~5.6.0&quot;,&#10;    &quot;karma&quot;: &quot;~6.4.0&quot;,&#10;    &quot;karma-chrome-launcher&quot;: &quot;~3.2.0&quot;,&#10;    &quot;karma-coverage&quot;: &quot;~2.2.0&quot;,&#10;    &quot;karma-jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma-jasmine-html-reporter&quot;: &quot;~2.1.0&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.3&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;buy-01-frontend&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;,&#10;    &quot;test&quot;: &quot;ng test&quot;,&#10;    &quot;test:headless&quot;: &quot;ng test --karma-config=karma.conf.js --browsers=ChromeHeadlessCI --watch=false --code-coverage&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/common&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/core&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/router&quot;: &quot;^20.1.2&quot;,&#10;    &quot;lucide-angular&quot;: &quot;^0.525.0&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.15.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular/build&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^20.1.2&quot;,&#10;    &quot;@types/jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;jasmine-core&quot;: &quot;~5.6.0&quot;,&#10;    &quot;karma&quot;: &quot;~6.4.0&quot;,&#10;    &quot;karma-chrome-launcher&quot;: &quot;~3.2.0&quot;,&#10;    &quot;karma-coverage&quot;: &quot;~2.2.0&quot;,&#10;    &quot;karma-jasmine&quot;: &quot;~5.1.0&quot;,&#10;    &quot;karma-jasmine-html-reporter&quot;: &quot;~2.1.0&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.3&quot;&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>